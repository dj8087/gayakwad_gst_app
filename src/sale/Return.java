/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Saleing.java
 *
 * Created on Aug 3, 2015, 12:42:22 AM
 */

package sale;

import gayakwad.DBConnection;
import java.sql.ResultSet;
import com.implidea.DecimalFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import stock.Product;
import gayakwad.AllConstants;
import gayakwad.invoices.AllInvoices;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import gayakwad.invoices.SellInvoice;
import java.util.Date;
import java.util.HashMap;
import net.sf.jasperreports.engine.JasperPrintManager;

/**
 *
 * @author admin
 */
public class Return extends javax.swing.JFrame {

    CustomerObj[] co;
    JFrame parent;
    /** Creates new form Saleing */
    public Return(JFrame p) {
        try {
            parent = p;
            initComponents();
             java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            this.setLocation(dim.width/2-this.getSize().width/2, 0);

            jTextField3.requestFocus();
            
        } catch (Exception ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(myDispose());

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24));
        jLabel1.setText("****Sale Return****");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(287, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(262, 262, 262))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Customer Name:");

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Invoice No.");

        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jButton3.setText("Invoice Details (Ctrl+I)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap(278, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Product Code");

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Weight (g):");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Labor (Rs.):");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Product Name", "Weight", "Custmer Name", "Invoice No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("0.0");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("0.0");

        jButton1.setText("Reset (Ctrl+R)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Finish (Ctrl+F)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Total Fine (g):");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("0.0");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Base Tounch");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Base Labor");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(255, 102, 102));
        jCheckBox1.setFont(new java.awt.Font("Times New Roman", 0, 14));
        jCheckBox1.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Fix This");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(49, 49, 49)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(62, 62, 62)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jCheckBox1)))
                                    .addGap(109, 109, 109)))
                            .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel8)
                            .addGap(123, 123, 123)
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel9)
                            .addGap(70, 70, 70)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(42, 42, 42))
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(42, 42, 42))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBox1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        jMenu1.setText("Options");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Finish");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Invoice");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Delete");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Reset");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Test");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Func Test");
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // tounch
        if(evt.getKeyChar()!='\n')  return;
      
        jTextField2.requestFocus();
        
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // labor
          if(evt.getKeyChar()!='\n')  return;
         
            addToTable(jTextField3.getText());
          jTextField3.setText("");
          jTextField3.requestFocus();
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // barcode
          if(evt.getKeyChar()!='\n')  return;
           String txt = jTextField3.getText();
          if(txt.length()<1){
              JOptionPane.showMessageDialog(rootPane, "Invalid Barcode");
              jTextField3.requestFocus();
              return;
          }


          //check already in sell table...
          boolean found = false;
          for(Product pp : product)
              if(found=pp.barcode.equals(txt))
                  break;

          if(found){
              JOptionPane.showMessageDialog(rootPane, "Already In Process!");
              return;
          }

         // addToTable(txt);
          if(loadDetails(txt))
          {
              if(jCheckBox1.isSelected())
              {
                  addToTable(jTextField3.getText());
                   jTextField3.setText("");
                   jTextField3.requestFocus();
              }
              else
                  jTextField1.requestFocus();
          }
          
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Finish Btn
        save();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Finish Menu
        save();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Reset Menu
        reset();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Reset Btn
        reset();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // exit
        dispose();
        parent.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // invoice details..

        showInvoiceDetails();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // invoice mene..
        showInvoiceDetails();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // delete menu..

        int rIndex = jTable1.getSelectedRow();
        if(rIndex<0){
            JOptionPane.showMessageDialog(rootPane, "Please Select A Record To Delete!");
            return;
        }
         int op = JOptionPane.showConfirmDialog(rootPane, "Do you want Delete?");
          /*
            * 0-Yes
            * 1-No
            * 2-Cacle
            */
          if(op==0)
           {
                //yes
              product.remove(product.size()-1-rIndex);
              refreshTable();
           }else if(op==1){

           }else{

           }

        
    }//GEN-LAST:event_jMenuItem5ActionPerformed


    private void showInvoiceDetails(){
        String iNO = jTextField5.getText();
        if(iNO.length()<1){
           JOptionPane.showMessageDialog(rootPane, "No Invoice No Entered!");
           return;
        }

        Updated_Invoice dialog = new Updated_Invoice(parent, true);
        dialog.setInvoiceNo(iNO);
        dialog.setVisible(true);
    }
    public int myDispose(){
        dispose();
        parent.setVisible(true);
        return DISPOSE_ON_CLOSE;
    }

    
    private void reset(){
        while(product.size()>0){
            product.remove(0);
        }
        //jComboBox1.requestFocus();
        refreshTable();
    }


        DecimalFormat df_gold = new DecimalFormat("########.###");
    DecimalFormat df_money = new DecimalFormat("########");
    

    private float last_g_bal=0,last_m_bal=0;
    private void print1(SellInvoice si){
        try {
            CustomerObj cust_obj = CustomerObj.loadCustomerObj(si.cid);
            HashMap hm = new HashMap();
            hm.put("cname", si.cname);
            hm.put("invoice_no",""+ si.invoice_no);
            hm.put("t_g", df_gold.format(si.getTotalFine()));
            hm.put("t_p", df_money.format(si.totalLabor()));
            hm.put("d_g", df_gold.format(si.old_gold*(-1)));
            hm.put("d_p", df_money.format(si.old_money*(-1)));
            hm.put("p_g", "-"+df_gold.format(si.jamaGold));
            hm.put("p_p", "-"+df_money.format(si.jamaMoney));
            hm.put("b_g", df_gold.format(cust_obj.gold_ac*(-1)));
            hm.put("b_p", df_money.format(cust_obj.money_ac*(-1)));
            // Generate jasper print
            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(AllConstants.jasperFileName, hm, new DBConnection().getConnection());
            //JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(jasperFileName, hm);
            // Export pdf file
            //JasperExportManager.exportReportToPdfFile(jprint, pdfFileName);
          //  JasperPrintManager.printPage(jprint, 0, true);
            JasperPrintManager.printPages(jprint, 0,jprint.getPages().size()-1, true);
           // dispose();
            System.out.println("Printing!");
          //   JasperViewer.viewReport(jprint);
             System.out.println("Done!");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex);
            //Logger.getLogger(AllInvoices.class.getName()).log(Level.SEVERE, null, ex);
        }
    }





    
    private void save() {
       try
       {

           //check invoice no same..
           int invoice_no=(-1);
           int count = 0;
                for(Product p : product){
                    if(invoice_no<0){
                        invoice_no=p.invoice_no_if_selled;
                        System.out.println("inv no:"+invoice_no);
                        count++;
                    }
                    else if(invoice_no==p.invoice_no_if_selled){
                        System.out.println("Once same inv no:"+p.invoice_no_if_selled);
                        count++;
                    }else{
                        System.out.println("no match inv no:"+p.invoice_no_if_selled);
                    }
                }
                int diff = Math.abs(product.size()-count);
                System.out.println("["+count+"]["+diff+"]");
                if(diff>count){
                    JOptionPane.showMessageDialog(rootPane, ""+count+" Products From Differant Invoices!");
                    return;
                }else if(diff!=0){
                    JOptionPane.showMessageDialog(rootPane, ""+diff+" Products From Differant Invoices!");
                    return;
                }

           //new invoice creation...
            //credit...
           float gold_credit = 0;
           float money_credit = 0;
           String conversion_comment_G = "";
           String conversion_comment_M = "";
           
            CustomerObj cust_obj = loadCust(current_cid);//(CustomerObj) jComboBox1.getSelectedItem();
            last_g_bal = cust_obj.gold_ac;
            last_m_bal = cust_obj.money_ac;

            CreditAtSell dialog = new CreditAtSell(new javax.swing.JFrame(), true,cust_obj,total_fine*(-1),total_labor*(-1));
                dialog.setVisible(true);
                if(dialog.FINISHED){
                    gold_credit =(dialog.total_fine_actual_recv);
                    money_credit = (dialog.total_cash_actual_recv);
                    System.out.println("["+(money_credit)+"]["+gold_credit+"]");
                    System.out.println("["+(dialog.total_cash_converted)+"]["+dialog.total_fine_converted+"]");
                    System.out.println("["+(dialog.total_G_TO_M)+"]["+dialog.total_M_TO_G+"]");
                    System.out.println("["+(cust_obj.money_ac)+"]["+cust_obj.gold_ac+"]");

                    /*
                     * M      G
                    [17500.0][7.0]
                    [5000.0][3.0]
                    [7500.0][2.0]
                    [-5050.0][-5.54]
                    3.0 gm Fine Convert-> +Rs.7500.0/- Jama
                    Rs.5000.0/- Convert-> 2.0 gm fine Jama
                     */

                    if(dialog.total_G_TO_M>0)
                        conversion_comment_G=""+dialog.total_fine_converted+" gm Fine Convert-> Rs."+dialog.total_G_TO_M+"/- Jama";
                    if(dialog.total_M_TO_G>0)
                        conversion_comment_M="Rs."+dialog.total_cash_converted+"/- Convert-> "+dialog.total_M_TO_G+" gm fine Jama";

                    System.out.println(conversion_comment_G);
                    System.out.println(conversion_comment_M);

                    //if(cust_obj!=null)
                     //   return;
                }else{
                    return;
                }


                if(invoice_no<1){
                    processNoInvoiceNoumber(cust_obj, gold_credit, money_credit, conversion_comment_G, conversion_comment_M);
                    return;
                }
            String[] notIn = new String[product.size()];
            DBConnection con = new DBConnection();
        //    con.executeUpdate("update customer_mst set gold_ac=gold_ac-"+total_fine+", money_ac=money_ac-"+total_labor+" where cid="+cid);
            int index = 0;
            
            for(Product p : product){
                //float totalFineDeduct=0,totalLaborDeduct=0;
                notIn[index] = p.barcode;
                index++;
                //totalFineDeduct += (p.wt*(base_tounch/100));
                //totalLaborDeduct += base_labor;
//                con.executeUpdate("insert into stock_mst select barcode,name,wt,details from selled_stock_mst where barcode="+p.barcode+";");
//                con.executeUpdate("delete from selled_stock_mst where barcode='"+p.barcode+"'");
                //con.executeUpdate("update customer_mst set gold_ac=gold_ac+"+totalFineDeduct+", money_ac=money_ac+"+totalLaborDeduct+" where cid="+p.cid);
            }

                if(total_fine!=0)
                {
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','GOLD',"+total_fine+",now(),"+invoice_no+",'Thusi Return');";
                   // System.out.println(qry);
                    con.executeUpdate(qry);
                }
                if(total_labor!=0)
                {
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','MONEY',"+total_labor+",now(),"+invoice_no+",'Thusi Return');";
                    //System.out.println(qry);
                    con.executeUpdate(qry);
                }

           {
                Date d = new Date();
                ResultSet rs = con.executeQuery("select dt from aj_gold_in_hand order by dt desc limit 1;");
                if(rs.next())
                    d = rs.getDate(1);
                String qry = "update aj_gold_in_hand set gold=gold+"+gold_credit+",money=money+"+money_credit+" where dt = '"+d+"'";
            //    System.out.println(qry);
                con.executeUpdate(qry);

           }
                
            
            if(gold_credit!=0){
                   String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','GOLD',"+gold_credit+",now(),"+invoice_no+",'At Return Time "+conversion_comment_M+"');";
                    //System.out.println(qry);
                    con.executeUpdate(qry);
               }
            if(money_credit!=0){
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','MONEY',"+money_credit+",now(),"+invoice_no+",'At Return Time "+conversion_comment_G+"');";
                  //  System.out.println(qry);
                    con.executeUpdate(qry);
               }
            
            con.executeUpdate("update customer_mst set gold_ac="+cust_obj.gold_ac+", money_ac="+cust_obj.money_ac+" where cid="+cust_obj.cid);
            updateInvoiceToNext(invoice_no, notIn);
            JOptionPane.showMessageDialog(rootPane, "Sell Updated!");
            
         

              
            reset();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }


    private void processNoInvoiceNoumber(CustomerObj cust_obj,float gold_credit,float money_credit,
                                    String conversion_comment_G,String conversion_comment_M ) throws Exception{

        int invoice_no;
        //String[] notIn = new String[product.size()];
            DBConnection con = new DBConnection();

            ResultSet rs = con.executeQuery("select * from next_invoice_no;");
            rs.next();
            invoice_no = rs.getInt(1);


            System.out.println("New invoice, Saving old Balance!");
            con.executeUpdate("insert into sell_invoice_cust_old_bal values("+invoice_no+","+cust_obj.cid+","+last_g_bal+","+last_m_bal+")");
           con.executeUpdate("insert into sell_invoice_date values("+invoice_no+",now())");



            String not_in_p_code = "";
             for(Product retP : product)
                  not_in_p_code += "'"+retP.barcode+"',";
            not_in_p_code = not_in_p_code.substring(0, not_in_p_code.length()-1);

            {
                String qry = "select count(barcode) from not_in_invoice where cid="+cust_obj.cid+" and barcode not in ("+not_in_p_code+")";
                rs = con.executeQuery(qry);
                rs.next();
                Product[] to_new_invoice = new Product[rs.getInt(1)];
                qry = "select * from not_in_invoice where cid="+cust_obj.cid+" and barcode not in ("+not_in_p_code+")";
                rs = con.executeQuery(qry);
                int pi=0;
                while(rs.next()){
                    to_new_invoice[pi] = new Product(rs.getString(1), rs.getString(2), rs.getFloat(3), rs.getString(4));
                    pi++;
                }
                ProvideSellDetails psd = new ProvideSellDetails(this, true, cust_obj, to_new_invoice);
                psd.setVisible(true);
                to_new_invoice = psd.p_for_invoice;

                if(to_new_invoice==null)    return;
                //createn new invoice
                int row_id = 0;
                for(Product pn : to_new_invoice){
                    row_id++;
                    pn.cid=cust_obj.cid;
                   con.executeUpdate("insert into sell_invoice values("+
                                        invoice_no+","+row_id+",'"+pn.barcode+"','"+pn.name+"',"+pn.wt+","+
                                        pn.tounch+","+pn.labor+",1,"+pn.cid+")");
                }
            }

            



            int index = 0;
            for(Product p : product){
                //float totalFineDeduct=0,totalLaborDeduct=0;
          //      notIn[index] = p.barcode;
                index++;
                //totalFineDeduct += (p.wt*(base_tounch/100));
                //totalLaborDeduct += base_labor;
                con.executeUpdate("insert into stock_mst select barcode,name,wt,details from selled_stock_mst where barcode="+p.barcode+";");
                con.executeUpdate("delete from selled_stock_mst where barcode='"+p.barcode+"'");
                //con.executeUpdate("update customer_mst set gold_ac=gold_ac+"+totalFineDeduct+", money_ac=money_ac+"+totalLaborDeduct+" where cid="+p.cid);
            }


            //create sell invoice from that cid for all products purches..
            //select * from not_in_invoice where cid=13 and barcode not in ('4608','4580','4118');
       


            

         

                if(total_fine!=0)
                {
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','GOLD',"+total_fine+",now(),"+invoice_no+",'Thusi Return');";
                   // System.out.println(qry);
                    con.executeUpdate(qry);
                }
                if(total_labor!=0)
                {
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','MONEY',"+total_labor+",now(),"+invoice_no+",'Thusi Return');";
                    //System.out.println(qry);
                    con.executeUpdate(qry);
                }


            if(gold_credit!=0){
                   String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','GOLD',"+gold_credit+",now(),"+invoice_no+",'At Return Time "+conversion_comment_M+"');";
                    //System.out.println(qry);
                    con.executeUpdate(qry);
               }
            if(money_credit!=0){
                    String qry = "insert into aj_transations(name,tran_type,amount,dt,invoice_no,comment) values('"+cust_obj.name+"','MONEY',"+money_credit+",now(),"+invoice_no+",'At Return Time "+conversion_comment_G+"');";
                  //  System.out.println(qry);
                    con.executeUpdate(qry);
               }

            con.executeUpdate("update customer_mst set gold_ac="+cust_obj.gold_ac+", money_ac="+cust_obj.money_ac+" where cid="+cust_obj.cid);
            //updateInvoiceToNext(invoice_no, notIn);



            JOptionPane.showMessageDialog(rootPane, "Sell Updated With New Invoice No:"+invoice_no);

            


            SellInvoice si = SellInvoice.loadInvoiceFor(invoice_no);

           int op = JOptionPane.showConfirmDialog(rootPane, "Do you want Close This Invoice?");
          /*
            * 0-Yes
            * 1-No
            * 2-Cacle
            */
          if(op==0)
           {
                //yes
                //close the invoice no
             // con.executeUpdate("insert into sell_invoices_closed values("+invoice_no+",now());");
              si.closeInvoice(jPanel1);
           }else if(op==1){

           }else{

           }


          op = JOptionPane.showConfirmDialog(rootPane, "Print Invoice?");
          /*
            * 0-Yes
            * 1-No
            * 2-Cacle
            */
          if(op==0)
           {
                
                AllInvoices.print(si,CustomerObj.loadCustomerObj(si.cid));
           }

              
            reset();

            
    }
    private void updateInvoiceToNext(int old_invoice_no,String[] retProd) throws Exception{
         DBConnection con = new DBConnection();
         String not_in_p_code = "(";
         for(String retP : retProd)
             not_in_p_code += "'"+retP+"',";

         
        SellInvoice si = SellInvoice.loadInvoiceFor(old_invoice_no);
         not_in_p_code = not_in_p_code.substring(0, not_in_p_code.length()-1)+")";

      //   int nextInvoiceNo = 0;

         /*ResultSet rs = con.executeQuery("select next_invoice_no from next_invoice_no;");
         if(rs.next()){
             nextInvoiceNo = rs.getInt(1);
         }
         if(nextInvoiceNo==0)
             nextInvoiceNo=1;
          * 
          */
         

         //System.out.println("["+nextInvoiceNo+"]not_in_p_code:"+not_in_p_code);
        
        //insert into sell_invoice (select next_invoice_no,row_id,code,product_name,wt,tounch,labor,qnty,cid from next_invoice_no join sell_invoice where invoice_no=2 and code not in ('3493','4410'));

        /*
        con.executeUpdate("insert into sell_invoice "
                            + "(select next_invoice_no,row_id,code,product_name,wt,tounch,labor,qnty,cid "
                            + "from next_invoice_no join sell_invoice where invoice_no="+old_invoice_no+" and"
                            + " code not in "+not_in_p_code+"));");


         *
         */

        con.executeUpdate("insert into stock_mst select barcode,name,wt,details from selled_stock_mst where barcode in "+not_in_p_code+";");
        con.executeUpdate("delete from selled_stock_mst where barcode in "+not_in_p_code+";");


        con.executeUpdate("delete from  sell_invoice where invoice_no="+old_invoice_no+" and code in "+not_in_p_code+";");




       // con.executeUpdate("insert into sell_invoice_update values("+old_invoice_no+","+nextInvoiceNo+");");
          int op = JOptionPane.showConfirmDialog(rootPane, "Do you want Close Invoice?");
          /*
            * 0-Yes
            * 1-No
            * 2-Cacle
            */
          if(op==0)
           {
                //yes
              //con.executeUpdate("insert into sell_invoices_closed values("+old_invoice_no+",now());");
              si.closeInvoice(jPanel1);
           }else if(op==1){

           }else{

           }

           op = JOptionPane.showConfirmDialog(rootPane, "Print Invoice?");
          /*
            * 0-Yes
            * 1-No
            * 2-Cacle
            */
          if(op==0)
           {
               
                AllInvoices.print(si,CustomerObj.loadCustomerObj(si.cid));
           }

           
        
        //--------------------------------------------------
    }

    private CustomerObj loadCust(String cid){
        try {
            DBConnection con = new DBConnection();
            String qry = "select * from customer_mst where cid="+cid;
            System.out.println(qry);
            ResultSet rs = con.executeQuery(qry);
            rs.next();
            int cciidd = rs.getInt(1);
            String name = rs.getString(2);
            String add = rs.getString(3);
            String mob = rs.getString(4);
            float bt = rs.getFloat(5);
            float bl = rs.getFloat(6);
            float gc = rs.getFloat(7);
            float mc = rs.getFloat(8);
            CustomerObj ret = new CustomerObj(cciidd, name, add, mob, bt, bl, gc, mc);
            ret.advance = rs.getFloat(9);
            return ret;
        } catch (Exception ex) {
           ex.printStackTrace();
           JOptionPane.showMessageDialog(rootPane, ex);
           return null;
        } 
    }

    String current_cid = null;
    private boolean loadDetails(String txt){
        try {
            DBConnection con = new DBConnection();
            String qry = "SELECT selled_stock_mst.name,wt,details,customer_mst.cid,customer_mst.name,base_tounch,base_labor FROM selled_stock_mst join customer_mst where customer_mst.cid=selled_stock_mst.cid and barcode="+txt;
            System.out.println(qry);
            ResultSet rs = con.executeQuery(qry);
            if(rs.next()){
                String name = rs.getString(1);
                float wt = rs.getFloat(2);
                String details = rs.getString(3);
                Product pp = new Product(txt, name, wt, details);
                pp.cid = rs.getInt(4);
                pp.cname = rs.getString(5);

                if(jTextField1.getText().length()<1)
                    base_tounch = rs.getFloat(6);
                else
                    base_tounch = Float.parseFloat(jTextField1.getText());
                if(jTextField2.getText().length()<1)
                    base_labor = rs.getFloat(7);
                else
                    base_labor = Float.parseFloat(jTextField2.getText());
                jTextField4.setText(pp.cname);
                jTextField1.setText(""+base_tounch);
                jTextField2.setText(""+base_labor);
                current_cid=""+pp.cid;

                //find invoice no..
                if(isInvoiceClosedForProduct(txt)){
                    //check for closed
                     JOptionPane.showMessageDialog(rootPane, "Invoice for this Product Already Closed!");
                     return false;
                }
                qry = "SELECT invoice_no,tounch,labor FROM sell_invoice_not_update where code='"+txt+"';";
                System.out.println(qry);
                rs = con.executeQuery(qry);
                if(rs.next()){
                    int invoice_no = rs.getInt(1);
                    jTextField5.setText(""+invoice_no);
                    jTextField1.setText(""+rs.getFloat(2));
                    jTextField2.setText(""+rs.getFloat(3));
                }else{

                    JOptionPane.showMessageDialog(rootPane, "Product Invoice No. not found or Updated!");

                    //check wherer invoice for this code has been close or updated!.....
                     
                    //return false;
                }
              //  product.add(pp);
              //  refreshTable();
            }else{
                JOptionPane.showMessageDialog(rootPane, "Product Not Found In Selled Stock");
                return false;
            }
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Error In Loding Product Details");
            return false;
        }
    }

    private boolean isInvoiceClosedForProduct(String code) throws Exception{
//        SELECT invoice_no FROM sell_invoice where code='4060' and invoice_no in (select invoice_no from sell_invoice_update union select invoice_no from sell_invoices_closed);
//        SELECT invoice_no,dt FROM sell_invoice natural join sell_invoices_closed where code='666';

        DBConnection con = new DBConnection();
        ResultSet rs = con.executeQuery("SELECT invoice_no,dt FROM sell_invoice_not_update natural join sell_invoices_closed where code='"+code+"';");
        return rs.next();
        
    }


    private double getUpdatedInvoiceForProduct(String code) throws Exception{
//        SELECT invoice_no FROM sell_invoice where code='4060' and invoice_no in (select invoice_no from sell_invoice_update union select invoice_no from sell_invoices_closed);
//        SELECT updated_invoice_no FROM sell_invoice natural join sell_invoice_update where code='4646';


        DBConnection con = new DBConnection();
        ResultSet rs = con.executeQuery("SELECT updated_invoice_no FROM sell_invoice_not_update natural join sell_invoice_update where code='"+code+"';");
        if(rs.next())
            return rs.getInt(1);
        return -1;

    }



    Vector<Product> product = new Vector<Product>();
    private float base_tounch,base_labor;
    private void addToTable(String txt){
        try {
            DBConnection con = new DBConnection();
            String qry = "SELECT selled_stock_mst.name,wt,details,customer_mst.cid,customer_mst.name,base_tounch,base_labor FROM selled_stock_mst join customer_mst where customer_mst.cid=selled_stock_mst.cid and barcode="+txt;
            ResultSet rs = con.executeQuery(qry);
            if(rs.next()){

                String name = rs.getString(1);
                float wt = rs.getFloat(2);
                String details = rs.getString(3);
                Product pp = new Product(txt, name, wt, details);
                pp.cid = rs.getInt(4);
                pp.cname = rs.getString(5);

                if(jTextField1.getText().length()<1)
                    base_tounch = rs.getFloat(6);
                else
                    base_tounch = Float.parseFloat(jTextField1.getText());
                if(jTextField2.getText().length()<1)
                    base_labor = rs.getFloat(7);
                else
                    base_labor = Float.parseFloat(jTextField2.getText());
                jTextField4.setText(pp.cname);
                jTextField1.setText(""+base_tounch);
                jTextField2.setText(""+base_labor);
                pp.labor=base_labor;
                pp.tounch=base_tounch;



                  //find invoice no..
                if(isInvoiceClosedForProduct(txt)){
                    //check for closed
                     JOptionPane.showMessageDialog(rootPane, "Invoice for this Product Already Closed!");
                     return;
                }                 
                //get invoice no..
               qry = "SELECT invoice_no FROM sell_invoice_not_update where code='"+txt+"';";
                System.out.println(qry);
                rs = con.executeQuery(qry);
                if(rs.next()){
                    int invoice_no = rs.getInt(1);
                    pp.invoice_no_if_selled = invoice_no;
                    jTextField5.setText(""+invoice_no);
                    
                }else{
                   // JOptionPane.showMessageDialog(rootPane, "Product Invoice No. not found Or Updated!");
                    pp.invoice_no_if_selled = 0;
                    jTextField5.setText("0");
                    //return;
                }
                product.add(pp);
                refreshTable();
            }else{
                JOptionPane.showMessageDialog(rootPane, "Product Not Found In Selled Stock");
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    private void refreshTable(){
           String[][] data = new String[product.size()][];
  //              Product[] prd = new Product[product.size()];
                 for(int i=0;i<data.length;i++){
                    Product p = product.get(i);
                    
                    data[data.length-i-1] = new String[]{""+p.barcode,p.name,""+p.wt,p.cname,""+p.invoice_no_if_selled};
                }

           
                 jTable1.setModel(new javax.swing.table.DefaultTableModel(data,
                    new String [] {
                        "Barcode", "Product Name", "Weight", "Customer Name","Invoice No."
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false,false,false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });

                //String bT = jTextField1.getText();
                //String bL = jTextField2.getText();

              //  float base_T = base_tounch;//Float.parseFloat(bT);
              //  float base_L = base_labor;//Float.parseFloat(bL);

               total_wt=0;
               total_fine=0;
               total_labor=0;
                for(Product p : product){
                    total_wt+=p.wt;
                    total_fine+= (p.wt)*(p.tounch/100);
                    total_labor+=p.labor;
                }
                
                //total_wt = total_wt;
                //total_fine = total_fine;
                jLabel8.setText(""+df.format(total_wt));
                jLabel11.setText(""+df.format(total_fine));
                jLabel9.setText(""+total_labor);
    }
    DecimalFormat df = new DecimalFormat("######.###");
     float total_wt=0,total_fine=0,total_labor=0;
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return(new JFrame()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
