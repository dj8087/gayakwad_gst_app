/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MonthCalender.java
 *
 * Created on Sep 13, 2015, 11:02:08 AM
 */

package ui;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author admin
 */
public class MonthCalender extends javax.swing.JPanel  implements ChangeListener{

    /** Creates new form MonthCalender */
    public MonthCalender() {
       // initComponents();
            setLayout(new BorderLayout());
            setBorder(new LineBorder(backGroundColor, 2));
            setBackground(backGroundColor);

            JPanel topYearAndMonth = createYearAndMonthPanal();
            add(topYearAndMonth, BorderLayout.NORTH);
            JPanel centerWeekAndDay = createWeekAndDayPanal();
            add(centerWeekAndDay, BorderLayout.CENTER);

            reflushWeekAndDay();
    }

     int startYear = 1980;
        int lastYear = 2050;

        Color backGroundColor = Color.gray;
        Color palletTableColor = Color.white;
        Color todayBackColor = Color.orange;
        Color weekFontColor = Color.blue;
        Color dateFontColor = Color.black;
        Color weekendFontColor = Color.red;

        Color controlLineColor = Color.pink;
        Color controlTextColor = Color.white;

        JSpinner yearSpin;
        JSpinner monthSpin;
        JButton[][] daysButton = new JButton[6][7];

        DatePickerDialog dd;
        public void setDialog(DatePickerDialog d){
            dd=d;
        }

        

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables




        private JPanel createYearAndMonthPanal() {
            Calendar cal = getCalendar();
            int currentYear = cal.get(Calendar.YEAR);
            int currentMonth = cal.get(Calendar.MONTH) + 1;
            YearMonthPanal ymp = new YearMonthPanal();
           // JPanel panel = new JPanel();
           // panel.setLayout(new FlowLayout());
           // panel.setBackground(controlLineColor);
            yearSpin = ymp.jSpinner2;
           ymp.jSpinner2.setModel(new SpinnerNumberModel(currentYear,startYear, lastYear, 1));
//            yearSpin = new JSpinner(new SpinnerNumberModel(currentYear,startYear, lastYear, 1));
//            yearSpin.setPreferredSize(new Dimension(56, 20));
            yearSpin.setName("Year");
            ymp.jSpinner2.setEditor(new JSpinner.NumberEditor(yearSpin, "####"));
            ymp.jSpinner2.addChangeListener(this);
           // panel.add(yearSpin);

//            JLabel yearLabel = new JLabel("Year");
//            yearLabel.setForeground(controlTextColor);
//            panel.add(yearLabel);

            monthSpin = ymp.jSpinner3;
            monthSpin.setModel(new SpinnerNumberModel(currentMonth, 1,12, 1));
            //monthSpin.setPreferredSize(new Dimension(35, 20));
            monthSpin.setName("Month");
            monthSpin.addChangeListener(this);
            //panel.add(monthSpin);

//            JLabel monthLabel = new JLabel("Month");
//            monthLabel.setForeground(controlTextColor);
//            panel.add(monthLabel);

            return ymp;
        }

        private JPanel createWeekAndDayPanal() {
            String colname[] = { "S", "M", "T", "W", "T", "F", "S" };
            JPanel panel = new JPanel();
            panel.setFont(new java.awt.Font("Times New Roman", 1, 22));
            panel.setLayout(new GridLayout(7, 7));
            panel.setBackground(Color.white);

            for (int i = 0; i < 7; i++) {
                JLabel cell = new JLabel(colname[i]);
                cell.setHorizontalAlignment(JLabel.CENTER);
                if (i == 0 || i == 6) {
                    cell.setForeground(weekendFontColor);
                } else {
                    cell.setForeground(weekFontColor);
                }
                panel.add(cell);
            }

            int actionCommandId = 0;
            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 7; j++) {
                    JButton numBtn = new JButton();
                    numBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
                  //  numBtn.setText("31");
//                    numBtn.setBorder(null);
//                    numBtn.setHorizontalAlignment(SwingConstants.RIGHT);
                    numBtn.setActionCommand(String.valueOf(actionCommandId));
                    //numBtn.setBackground(palletTableColor);
                    //numBtn.setForeground(dateFontColor);
                    numBtn.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent event) {
                            JButton source = (JButton) event.getSource();
                            if (source.getText().length() == 0) {
                                return;
                            }
                            dayColorUpdate(true);
                            source.setForeground(todayBackColor);
                            int newDay = Integer.parseInt(source.getText());
                            Calendar cal = getCalendar();
                            cal.set(Calendar.DAY_OF_MONTH, newDay);

                            setDate(cal);
                            Date selectedDay = cal.getTime();
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
                          //  System.out.println(sdf.format(cal.getTime()));
                            String sD =  ""+(selectedDay.getYear()+1900)+"-"+(1+selectedDay.getMonth())+"-"+(selectedDay.getDate());
                            System.out.println(sD);
                            dd.SELECTED_DATE=sD;
                            dd.SELECTED_DATE_display = ""+(selectedDay.getDate())+"-"+(1+selectedDay.getMonth())+"-"+(selectedDay.getYear()+1900);
                            System.out.println("SELECTED DATE:"+dd.SELECTED_DATE);
                            System.out.println("SELECTED_DATE_display:"+dd.SELECTED_DATE_display);
                            dd.setVisible(false);

                        }
                    });

                    //if (j == 0 || j == 6)
                    //    numBtn.setForeground(weekendFontColor);
                   // else
                    //    numBtn.setForeground(dateFontColor);
                    daysButton[i][j] = numBtn;
                    panel.add(numBtn);
                    actionCommandId++;
                }

            return panel;
        }
        Date newDate;
        private void setDate(Calendar c){
            newDate=c.getTime();
        }
        private Calendar getCalendar() {
            Calendar calendar = Calendar.getInstance();
            if(newDate!=null)
                calendar.setTime(newDate);
            else
                calendar.setTime(new Date());
            return calendar;
        }

        private int getSelectedYear() {
            return ((Integer) yearSpin.getValue()).intValue();
        }

        private int getSelectedMonth() {
            return ((Integer) monthSpin.getValue()).intValue();
        }

        private void dayColorUpdate(boolean isOldDay) {
            Calendar cal = getCalendar();
            int day = cal.get(Calendar.DAY_OF_MONTH);
            cal.set(Calendar.DAY_OF_MONTH, 1);
            int actionCommandId = day - 2 + cal.get(Calendar.DAY_OF_WEEK);
            int i = actionCommandId / 7;
            int j = actionCommandId % 7;
            if (isOldDay) {
                daysButton[i][j].setForeground(dateFontColor);
            } else {
                daysButton[i][j].setForeground(todayBackColor);
            }
        }

        private void reflushWeekAndDay() {
            Calendar cal = getCalendar();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            int maxDayNo = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
            int dayNo = 2 - cal.get(Calendar.DAY_OF_WEEK);
            for (int i = 0; i < 6; i++) {
                for (int j = 0; j < 7; j++) {
                    String s = "";
                    if (dayNo >= 1 && dayNo <= maxDayNo) {
                        s = String.valueOf(dayNo);
                    }
                    daysButton[i][j].setText(s);
                    dayNo++;
                }
            }
            dayColorUpdate(false);
        }

        public void stateChanged(ChangeEvent e) {
            dayColorUpdate(true);

            JSpinner source = (JSpinner) e.getSource();
            Calendar cal = getCalendar();
            if (source.getName().equals("Year")) {
                cal.set(Calendar.YEAR, getSelectedYear());
            } else {
                cal.set(Calendar.MONTH, getSelectedMonth() - 1);
            }
            setDate(cal);
            System.out.println("Mnth:"+cal.getTime());
            reflushWeekAndDay();
        }



        
}
